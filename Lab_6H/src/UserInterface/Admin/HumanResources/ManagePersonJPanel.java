/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Admin.HumanResources;

import Business.Business;
import Business.Person.Person;
import Business.Person.UserAccount;
import UserInterface.LoginScreenJPanel;
import UserInterface.Admin.UserAccounts.ViewUserAccountJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shinychenw
 */
public class ManagePersonJPanel extends javax.swing.JPanel {

    private JPanel cardSequenceJPanel;
    private Business business;
    private UserAccount userAccount;
    private ArrayList<Person> pl;
    /**
     * Creates new form ManagePersonJPanel
     */
    public ManagePersonJPanel(JPanel cardSequenceJPanel,Business business,UserAccount userAccount) {
        initComponents();
        this.cardSequenceJPanel = cardSequenceJPanel;
        this.business = business;
        this.userAccount = userAccount;
        pl = new ArrayList();
        populateTable();
    }

    public void populateTable(){
        int rc = jTablePersonList.getModel().getRowCount()-1;
        while(rc>=0) {
            ((DefaultTableModel) jTablePersonList.getModel()).removeRow(rc);
            rc = rc - 1;
        }
        DefaultTableModel dtm = (DefaultTableModel) jTablePersonList.getModel();
        dtm.setRowCount(0);
        pl.clear();
        
        for(Person person: business.getPersonDirectory().getPersonList()){
                Object[] row = new Object[4];
                row[0]=person.getPersonID();
                row[1]=person.getFirstName();
                row[2]=person.getLastName();
                row[3]=business.findUserAccountNumByPerson(person);     
                dtm.addRow(row); 
                pl.add(person);
        } 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnFindPerson = new javax.swing.JButton();
        btnNewPerson = new javax.swing.JButton();
        btnViewPerson = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePersonList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtPersonID = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        btnFindPerson.setText("Find Person By ID>>");
        btnFindPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPersonActionPerformed(evt);
            }
        });

        btnNewPerson.setText("Create New Person >>");
        btnNewPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewPersonActionPerformed(evt);
            }
        });

        btnViewPerson.setText("View Person >>");
        btnViewPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPersonActionPerformed(evt);
            }
        });

        jTablePersonList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PersonID", "First Name", "Last Name", "UserAccountNum"
            }
        ));
        jScrollPane1.setViewportView(jTablePersonList);

        jLabel1.setText("Person List");

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete Person >>");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnNewPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnViewPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnFindPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPersonID))))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(1, 1, 1)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(btnNewPerson)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewPerson)
                    .addComponent(txtPersonID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnFindPerson))
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewPersonActionPerformed
        // TODO add your handling code here:
        CreateNewPersonJPanel npj = new CreateNewPersonJPanel(cardSequenceJPanel,business);
        cardSequenceJPanel.add("NewPersonJPanel",npj);
        CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
        layout.next(cardSequenceJPanel);
    }//GEN-LAST:event_btnNewPersonActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        cardSequenceJPanel.remove(this);
        CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
        layout.previous(cardSequenceJPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnFindPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPersonActionPerformed
        // TODO add your handling code here:
        int personID = Integer.parseInt(txtPersonID.getText());
        Person person = business.getPersonDirectory().findPersonByID(personID);
        if(person == null){
            JOptionPane.showMessageDialog(null,"The person you want to find is not exist!","Warning",JOptionPane.WARNING_MESSAGE);            
        }
        else{
            ViewPersonJPanel uuaj = new ViewPersonJPanel(cardSequenceJPanel,business,person);
            cardSequenceJPanel.add("UpdateUserAccountJPanel",uuaj);
            CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
            layout.next(cardSequenceJPanel);
        }
    }//GEN-LAST:event_btnFindPersonActionPerformed

    private void btnViewPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPersonActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTablePersonList.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(null,"Please select a person from the table to update!","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            Person person = pl.get(selectedRow);
            ViewPersonJPanel uuaj = new ViewPersonJPanel(cardSequenceJPanel,business,person);
            cardSequenceJPanel.add("UpdatePersonJPanel",uuaj);
            CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
            layout.next(cardSequenceJPanel);
        }
    }//GEN-LAST:event_btnViewPersonActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTablePersonList.getSelectedRow();
        if(selectedRow >=0){
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to delete the user account?", "Warning", dialogButton);
            if(dialogResult == JOptionPane.YES_NO_OPTION){
                Person person = pl.get(selectedRow);
                
                //判断要删除的人是否有着唯一的管理员账户？
                int flag = 0;
                for(UserAccount ua: business.getUserAccountDirectory().getUserAccountList()){
                    if(ua.getRole().equals("System Admin")&&ua.getPerson()!=person)
                        flag++;
                }
                if(flag==0){
                    JOptionPane.showMessageDialog(null,"There will be no System Admin if you delete this person!","Warning",JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                //删除该人物的所有账户
                while(business.findUserAccountNumByPerson(person)!=0){
                    for(UserAccount ua: business.getUserAccountDirectory().getUserAccountList()){
                        if(ua.getPerson()==person){
                            business.getUserAccountDirectory().getUserAccountList().remove(ua);
                            break;
                        }
                    }
                }
                //删除该人物并刷新当前页面表格
                business.getPersonDirectory().removePerson(person);
                populateTable();
                
                //如果删除的是当前登陆人物，退回登陆界面
                if(userAccount.getPerson().equals(person)){
                    cardSequenceJPanel.remove(this);
                    Component[] componentArray = cardSequenceJPanel.getComponents();
                    Component component = componentArray[componentArray.length - 1];
                    HumanResourcesWorkAreaJPanel humanResourcesWorkAreaJPanel = (HumanResourcesWorkAreaJPanel) component;
                    component = componentArray[0];
                    LoginScreenJPanel loginScreenJPanel = (LoginScreenJPanel) component;
                    loginScreenJPanel.populate();
                    cardSequenceJPanel.remove(humanResourcesWorkAreaJPanel);
                    CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
                    layout.previous(cardSequenceJPanel);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"Please select a row from the table first!","Warning",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFindPerson;
    private javax.swing.JButton btnNewPerson;
    private javax.swing.JButton btnViewPerson;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePersonList;
    private javax.swing.JTextField txtPersonID;
    // End of variables declaration//GEN-END:variables
}
