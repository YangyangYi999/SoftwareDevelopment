/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.MarketManager;

import Business.Business;
import Business.Market.Market;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Person.Person;
import Business.Person.Salesman;
import Business.Supplier.Product;
import Business.Supplier.Supplier;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shinychenw
 */
public class MonitorSalesJPanel extends javax.swing.JPanel {

    private JPanel cardSequenceJPanel;
    private Business business;
    /**
     * Creates new form MonitorSalesJPanel
     */
    public MonitorSalesJPanel(JPanel cardSequenceJPanel,Business business) {
        initComponents();
        this.cardSequenceJPanel = cardSequenceJPanel;
        this.business = business;
        populate();
    }

    public void populate(){
        jComboBoxProduct.removeAllItems();
        for(Market m: business.getMarketList().getMarketList()){
            jComboBoxProduct.addItem(m);
            jComboBoxTop10.addItem(m);
        }
    }
    
    static String fix(double i,int k)
 {
  double j = i*Math.pow(10,k);
  j=Math.round(j);
  
  double dou = j/Math.pow(10,k);
  String str = String.valueOf(dou) ;
  //System.out.println(str.length()+" "+str.indexOf("."));
  while(str.length()-str.indexOf(".")<3){
   str = str+"0";
  }
  return str;
 }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnProductSalesRevenue = new javax.swing.JButton();
        btnTotal = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jComboBoxProduct = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        btnTop10 = new javax.swing.JButton();
        btnAbove = new javax.swing.JButton();
        btnBelow = new javax.swing.JButton();
        btnTop3 = new javax.swing.JButton();
        jComboBoxTop10 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Monitor Sales");

        btnProductSalesRevenue.setText("Product Sales Revenue");
        btnProductSalesRevenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductSalesRevenueActionPerformed(evt);
            }
        });

        btnTotal.setText("Total Revenue");
        btnTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalActionPerformed(evt);
            }
        });

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel2.setText("Market:");

        btnTop10.setText("Top10 Sales Person");
        btnTop10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTop10ActionPerformed(evt);
            }
        });

        btnAbove.setText("Sales Person Above Target");
        btnAbove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAboveActionPerformed(evt);
            }
        });

        btnBelow.setText("Sales Person Below Target");
        btnBelow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBelowActionPerformed(evt);
            }
        });

        btnTop3.setText("Top3 Products");
        btnTop3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTop3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Market:");

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable);

        jLabel4.setText("Market:");

        jLabel5.setText("Market:");

        jButton1.setText("View Salesman Salary");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnBack)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 3, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxTop10, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnProductSalesRevenue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTop10, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAbove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBelow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTop3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(103, 103, 103))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(381, 381, 381))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(309, 309, 309))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 170, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(251, 251, 251))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel1)
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnTotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnProductSalesRevenue)
                                    .addComponent(jComboBoxProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnTop10)
                                    .addComponent(jComboBoxTop10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAbove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBelow)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTop3)))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        cardSequenceJPanel.remove(this);
        CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
        layout.previous(cardSequenceJPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
        dtm.setRowCount(0);
        dtm.setColumnCount(2);
        String[] tableHeads = new String[] { "Total Revenue", "Total Gap" };
        dtm.setColumnIdentifiers(tableHeads);
        Object row[] = new Object[2];
        double revenue = 0;
        double gap = 0;
        for(Order o: business.getMasterOrderCatalog().getOrderCatalog()){
            for(OrderItem oi: o.getOrderItemList()){
                revenue += oi.getActualPrice()*oi.getQuantity();
                gap += oi.getGap()*oi.getQuantity();
            }
        }
        row[0] = fix(revenue,2);
        row[1] = fix(gap,2);
        dtm.addRow(row);
    }//GEN-LAST:event_btnTotalActionPerformed

    private void btnProductSalesRevenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductSalesRevenueActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
        dtm.setRowCount(0);
        dtm.setColumnCount(3);
        String[] tableHeads = new String[] { "Product" ,"Product Revenue", "Product Gap" };
        dtm.setColumnIdentifiers(tableHeads);
        Market market = (Market)jComboBoxProduct.getSelectedItem();
        double totalGap = 0;
        double totalRevenue = 0;
        for(Supplier s: business.getSupplierDirectory().getSupplierDirectory()){
            for(Product p: s.getProductCatalog().getProductCatalog()){
                Object row[] = new Object[3];
                double revenue=0;
                double gap=0;
                for(Order o: business.getMasterOrderCatalog().getOrderCatalog()){
                        for(OrderItem oi: o.getOrderItemList()){
                                if(oi.getMarketOffer().getProduct()==p && oi.getMarketOffer().getMarket() == market){
                                    revenue += oi.getActualPrice()*oi.getQuantity();
                                    totalRevenue += oi.getActualPrice()*oi.getQuantity();
                                    gap += oi.getGap()*oi.getQuantity();
                                    totalGap += oi.getGap()*oi.getQuantity();       
                                }
                        }
                }
                row[0] = p;
                row[1] = fix(revenue,2);
                row[2] = fix(gap,2);
                dtm.addRow(row);
            }
        }
        Object row[] = new Object[3];
        row[0] = "Total";
        row[1] = fix(totalRevenue,2);
        row[2] = fix(totalGap,2);
        dtm.addRow(row);
        
    }//GEN-LAST:event_btnProductSalesRevenueActionPerformed

    private void btnAboveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
        dtm.setRowCount(0);
        dtm.setColumnCount(3);
        String[] tableHeads = new String[] { "Salesman" ,"Sales Revenue", "Sales Gap" };
        dtm.setColumnIdentifiers(tableHeads);
        
        ArrayList <Salesman> salesmanList = new ArrayList();
        
        for(Person p: business.getPersonDirectory().getPersonList()){
                if(Salesman.class.isInstance(p))
                    salesmanList.add((Salesman)p);
        }
        
        for(Salesman s: salesmanList){
            double revenue=0;
            double gap=0;
            boolean flag = true;
            for(Order o: business.getMasterOrderCatalog().getOrderCatalog()){
                if(o.getSalesman().getPersonID() == s.getPersonID()){
                    for(OrderItem oi: o.getOrderItemList()){
                        revenue+= oi.getActualPrice()*oi.getQuantity();
                        gap+= oi.getGap()*oi.getQuantity();
                    }
                    if(gap<0) {
                        flag=false;
                        break;
                    }
                }
            }
            if(flag==true){
                Object row[] = new Object[3];
                row[0] = s;
                row[1] = fix(revenue,2);
                row[2] = fix(gap,2);
                dtm.addRow(row);   
            }
        }
    }//GEN-LAST:event_btnAboveActionPerformed

    private void btnTop3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTop3ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
        dtm.setRowCount(0);
        dtm.setColumnCount(3);
        String[] tableHeads = new String[] { "Product" ,"Product Revenue", "Product Gap" };
        dtm.setColumnIdentifiers(tableHeads);
        for(Supplier s: business.getSupplierDirectory().getSupplierDirectory()){
            for(Product p: s.getProductCatalog().getProductCatalog()){
                
                double revenue=0;
                double gap=0;
                for(Order o: business.getMasterOrderCatalog().getOrderCatalog()){
                        for(OrderItem oi: o.getOrderItemList()){
                                if(oi.getMarketOffer().getProduct()==p){
                                    revenue += oi.getActualPrice()*oi.getQuantity();
                                    gap += oi.getGap()*oi.getQuantity();
                                }
                        }
                }
                p.setRevenue(revenue);
                p.setGap(gap);
            }
        }
        ArrayList<Product> productList=new ArrayList();
        for(Supplier s: business.getSupplierDirectory().getSupplierDirectory()){
            for(Product p: s.getProductCatalog().getProductCatalog()){
                productList.add(p);
            }
        }
        Collections.sort(productList, new SortProduct());  
        int flag = 0;
        for(Product p: productList){
            flag++;
            Object row[] = new Object[3];
            row[0] = p;
            row[1] = p.getRevenue();
            row[2] = p.getGap();
            dtm.addRow(row);   
            if(flag==3)
                break;
            
        }
    }//GEN-LAST:event_btnTop3ActionPerformed

    private void btnBelowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBelowActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
        dtm.setRowCount(0);
        dtm.setColumnCount(3);
        String[] tableHeads = new String[] { "Salesman" ,"Sales Revenue", "Sales Gap" };
        dtm.setColumnIdentifiers(tableHeads);
        
        ArrayList <Salesman> salesmanList = new ArrayList();
        
        for(Person p: business.getPersonDirectory().getPersonList()){
                if(Salesman.class.isInstance(p))
                    salesmanList.add((Salesman)p);
        }
        for(Salesman s: salesmanList){
            double revenue=0;
            double gap=0;
            for(Order o: business.getMasterOrderCatalog().getOrderCatalog()){
                if(o.getSalesman().getPersonID() == s.getPersonID()){
                    for(OrderItem oi: o.getOrderItemList()){
                        revenue+= oi.getActualPrice()*oi.getQuantity();
                        gap+= oi.getGap()*oi.getQuantity();
                    }
                }
            }
            if(gap<0){
                Object row[] = new Object[3];
                row[0] = s;
                row[1] = fix(revenue,2);
                row[2] = fix(gap,2);
                dtm.addRow(row);   
            }
        }
    }//GEN-LAST:event_btnBelowActionPerformed

    private void btnTop10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTop10ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
        dtm.setRowCount(0);
        dtm.setColumnCount(3);
        String[] tableHeads = new String[] { "Salesman" ,"Sales Revenue", "Sales Gap" };
        dtm.setColumnIdentifiers(tableHeads);
        Market market = (Market)jComboBoxTop10.getSelectedItem();
        
        ArrayList <Salesman> salesmanList = new ArrayList();
        
        for(Person p: business.getPersonDirectory().getPersonList()){
                if(Salesman.class.isInstance(p))
                    salesmanList.add((Salesman)p);
        }
        for(Salesman s: salesmanList){
            double revenue=0;
            double gap=0;
            for(Order o: business.getMasterOrderCatalog().getOrderCatalog()){
                if(o.getSalesman().getPersonID()==s.getPersonID()&&market.getCustomerList().contains(o.getCustomer())){
                    for(OrderItem oi: o.getOrderItemList()){
                        revenue+=oi.getActualPrice()*oi.getQuantity();
                        gap+=oi.getGap()*oi.getQuantity();
                    }
                }
            } 
            s.setRevenue(revenue);
            s.setGap(gap);
        }
        Collections.sort(salesmanList, new SortSalesman());  
        int flag=0;
        for(Salesman s: salesmanList){
            flag++;
            Object row[] = new Object[3];
            row[0] = s;
            row[1] = s.getRevenue();
            row[2] = s.getGap();
            dtm.addRow(row);  
            if(flag==10)
                break;
        }
    }//GEN-LAST:event_btnTop10ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)jTable.getModel();
        dtm.setRowCount(0);
        dtm.setColumnCount(3);
        String[] tableHeads = new String[] { "Salesman" ,"Salary"};
        dtm.setColumnIdentifiers(tableHeads);
        
        ArrayList <Salesman> salesmanList = new ArrayList();
        
        for(Person p: business.getPersonDirectory().getPersonList()){
                if(Salesman.class.isInstance(p))
                    salesmanList.add((Salesman)p);
        }
        for(Salesman s: salesmanList){
            
            for(Order o: business.getMasterOrderCatalog().getOrderCatalog()){
                
                if(o.getSalesman().getPersonID() == s.getPersonID()){
                    double revenue=0;
                    double gap=0;
                    for(OrderItem oi: o.getOrderItemList()){
                        revenue+= oi.getActualPrice()*oi.getQuantity();
                        gap+= oi.getGap()*oi.getQuantity();
                    }
                    double salary = s.getSalary();
                    salary+=gap*0.1;
                    s.setSalary(salary);
                }
                
            }
        }
        for(Salesman s:salesmanList){
            Object row[] = new Object[2];
            row[0] = s;
            row[1] = s.getSalary();
            dtm.addRow(row);  
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbove;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBelow;
    private javax.swing.JButton btnProductSalesRevenue;
    private javax.swing.JButton btnTop10;
    private javax.swing.JButton btnTop3;
    private javax.swing.JButton btnTotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBoxProduct;
    private javax.swing.JComboBox jComboBoxTop10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
}
