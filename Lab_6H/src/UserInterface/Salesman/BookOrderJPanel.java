/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Salesman;

import Business.Business;
import Business.Market.MarketOffer;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Person.Customer;
import Business.Person.UserAccount;
import Business.Supplier.Supplier;
import java.awt.CardLayout;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shinychenw
 */
public class BookOrderJPanel extends javax.swing.JPanel {

   private JPanel cardSequenceJPanel;
    private Business business;
    private UserAccount userAccount;
    private Customer customer;
    private boolean isCheckedOut=false;
    private Order order;
    /**
     * Creates new form BrowseProducts
     */
    public BookOrderJPanel(JPanel cardSequenceJPanel, Business business, UserAccount userAccount,Customer customer) {
        initComponents();
        this.cardSequenceJPanel = cardSequenceJPanel;
        this.business = business;
        this.userAccount = userAccount;
        this.customer = customer;
        populateSupplierCombo();
        order = new Order();
    }

    public void populateSupplierCombo(){
        jComboBoxSupplier1.removeAllItems();
        for(Supplier s: business.getSupplierDirectory().getSupplierDirectory()){
            jComboBoxSupplier1.addItem(s);
        }
        populateTable();
    }
    public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)jTableMarketOffer.getModel();
        dtm.setRowCount(0);
        if(jComboBoxSupplier1.getSelectedItem()==null){
            return;
        }
        Supplier supplier = (Supplier)jComboBoxSupplier1.getSelectedItem();
        for(MarketOffer m : business.getMarketOfferCatalog().getMarketOfferCatalog()){
            if(supplier.getProductCatalog().getProductCatalog().contains(m.getProduct())&&m.getMarket().getCustomer().equals(customer)){
                Object row[] = new Object[4];
                row[0] = m;
                row[1] = m.getProduct().getModelNum();
                row[2] = m.getProduct().getAvail();
                row[3] = m.getFloorPrice();
                row[4] = m.getCeilingPrice();
                row[5] = m.getTargetPrice();
                dtm.addRow(row);
            }
        }
    }
    public void refreshProductTable(String keyword){
        DefaultTableModel dtm = (DefaultTableModel)jTableMarketOffer.getModel();
        dtm.setRowCount(0);   
        for(MarketOffer m : business.getMarketOfferCatalog().getMarketOfferCatalog()){
            if(m.getProduct().getProductName().equalsIgnoreCase(keyword)&&m.getMarket().getCustomer().equals(customer)){
                Object row[] = new Object[4];
                row[0] = m;
                row[1] = m.getProduct().getModelNum();
                row[2] = m.getProduct().getAvail();
                row[3] = m.getFloorPrice();
                row[4] = m.getCeilingPrice();
                row[5] = m.getTargetPrice();
                dtm.addRow(row);
            }
        }
    }
    
    public void refreshOrderTable(){
        DefaultTableModel dtm = (DefaultTableModel)jTableOrder.getModel();
        dtm.setRowCount(0);   
        for(OrderItem oi: order.getOrderItemList()){
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getActualPrice();
            row[2] = oi.getQuantity();
            row[3] = oi.getQuantity()*oi.getActualPrice();
            dtm.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBoxSupplier1 = new javax.swing.JComboBox();
        txtSearchKeyWord = new javax.swing.JTextField();
        btnSearchProduct = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMarketOffer = new javax.swing.JTable();
        btnViewMarketOfferDetails = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtActualPrice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jSpinnerQuantity = new javax.swing.JSpinner();
        btnAddToCart = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableOrder = new javax.swing.JTable();
        btnViewOrderItem = new javax.swing.JButton();
        txtNewQuantity = new javax.swing.JTextField();
        btnModifyQuantity = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        btnRandom = new javax.swing.JButton();

        jLabel1.setText("Supplier");

        jComboBoxSupplier1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSupplier1ActionPerformed(evt);
            }
        });

        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });

        jLabel2.setText("Supplier MarketOffer Catalog");

        jTableMarketOffer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product &Market Name", "Product ID", "Avail", "Floor Price", "Ceiling Price", "Target Price"
            }
        ));
        jScrollPane1.setViewportView(jTableMarketOffer);

        btnViewMarketOfferDetails.setText("View MarketOffer Details");
        btnViewMarketOfferDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMarketOfferDetailsActionPerformed(evt);
            }
        });

        jLabel3.setText("Actual Price:");

        jLabel4.setText("Quantity:");

        btnAddToCart.setText("Add to Chart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        jLabel5.setText("Item in Cart");

        jTableOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Actual Price", "Quantity", "Total Amount"
            }
        ));
        jScrollPane2.setViewportView(jTableOrder);

        btnViewOrderItem.setText("View Item");
        btnViewOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewOrderItemActionPerformed(evt);
            }
        });

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        btnCheckOut.setText("Check out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jButton8.setText("<< Back");

        btnRandom.setText("Random");
        btnRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton8)
                .addGap(0, 888, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewOrderItem)
                        .addGap(128, 128, 128)
                        .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnModifyQuantity)
                        .addGap(94, 94, 94)
                        .addComponent(btnCheckOut)
                        .addGap(61, 61, 61)
                        .addComponent(btnRemove))
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewMarketOfferDetails)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtActualPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRandom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(btnAddToCart)
                        .addGap(63, 63, 63))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxSupplier1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(143, 143, 143)
                        .addComponent(txtSearchKeyWord, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton8)
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSupplier1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchKeyWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchProduct))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewMarketOfferDetails)
                    .addComponent(jLabel3)
                    .addComponent(txtActualPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jSpinnerQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddToCart)
                    .addComponent(btnRandom))
                .addGap(27, 27, 27)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewOrderItem)
                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModifyQuantity)
                    .addComponent(btnCheckOut)
                    .addComponent(btnRemove))
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSupplier1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSupplier1ActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_jComboBoxSupplier1ActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        // TODO add your handling code here:
        String productName = txtSearchKeyWord.getText();
        refreshProductTable(productName);
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnViewMarketOfferDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMarketOfferDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableMarketOffer.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details!","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        else{
            MarketOffer m = (MarketOffer)jTableMarketOffer.getValueAt(selectedRow,0);
            ViewMarketOfferDetailJPanel vmodj = new ViewMarketOfferDetailJPanel(cardSequenceJPanel,m);
            cardSequenceJPanel.add("ViewMarketOfferDetailJPanel(Salesman)",vmodj);
            CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
            layout.next(cardSequenceJPanel);
        }
    }//GEN-LAST:event_btnViewMarketOfferDetailsActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableMarketOffer.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a row!");
            return;
        }
        MarketOffer selectedMarketOffer = (MarketOffer)jTableMarketOffer.getValueAt(selectedRow, 0);
        int fetchQuantity = (Integer)jSpinnerQuantity.getValue();
        if(fetchQuantity <=0){
            JOptionPane.showMessageDialog(null, "Quantiy cannot be less than 0!");
            return;
        }
        try{
            double actualPrice = Double.parseDouble(txtActualPrice.getText());
            if(actualPrice < selectedMarketOffer.getFloorPrice()||actualPrice > selectedMarketOffer.getCeilingPrice()){
                JOptionPane.showMessageDialog(null, "Actual Price should be between floor price and ceiling price!");
                return;
            }
            if(fetchQuantity <= selectedMarketOffer.getProduct().getAvail()){
                boolean alreadyPresent = false;
                for(OrderItem oi: order.getOrderItemList()){
                    if(oi.getMarketOffer() == selectedMarketOffer){
                        int oldAvail = selectedMarketOffer.getProduct().getAvail();
                        int newAvail = oldAvail - fetchQuantity;
                        selectedMarketOffer.getProduct().setAvail(newAvail);
                        oi.setQuantity(fetchQuantity+oi.getQuantity());
                        oi.setGap(actualPrice-(double)oi.getMarketOffer().getTargetPrice());
                        alreadyPresent = true;
                        populateTable();
                        refreshOrderTable();
                        break;
                    }
                }
                if(!alreadyPresent){
                    int oldAvail = selectedMarketOffer.getProduct().getAvail();
                    int newavail = oldAvail - fetchQuantity;
                    selectedMarketOffer.getProduct().setAvail(newavail);
                    order.addOrderItem(selectedMarketOffer, fetchQuantity, actualPrice,actualPrice-(double)selectedMarketOffer.getTargetPrice());
                    populateTable();
                    refreshOrderTable();
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Quantiy > Availability!","Waring",JOptionPane.WARNING_MESSAGE);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Invalid Actual Price!");
            return;
        }
        
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnViewOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewOrderItemActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableOrder.getSelectedRow();
        if(selectedRow <0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details!","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        else{
            OrderItem oi = (OrderItem)jTableOrder.getValueAt(selectedRow,0);
            ViewOrderItemDetailJPanel voidj = new ViewOrderItemDetailJPanel(cardSequenceJPanel,oi);
            cardSequenceJPanel.add("ViewOrderItemDetailJPanel(Cutomer)",voidj);
            CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
            layout.next(cardSequenceJPanel);
        }
    }//GEN-LAST:event_btnViewOrderItemActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTableOrder.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row from the table to view details!","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        OrderItem orderItem = (OrderItem)jTableOrder.getValueAt(selectedRow, 0);
        int currentAvail = orderItem.getMarketOffer().getProduct().getAvail();
        int oldQuantity = orderItem.getQuantity();
        int newQuantity = Integer.parseInt(txtNewQuantity.getText());
        if(newQuantity > (currentAvail + oldQuantity)){
            JOptionPane.showMessageDialog(null, "Quantity is more than Avail!");
            return;
        }
        else{
            if(newQuantity <=0){
                JOptionPane.showMessageDialog(null, "Quantity cannot be less than 0!");
                return;
            }
            orderItem.setQuantity(newQuantity);
            orderItem.getMarketOffer().getProduct().setAvail(currentAvail + (oldQuantity - newQuantity));
            refreshOrderTable();
            populateTable();
            
        }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if(order.getOrderItemList().size() > 0){
            business.getMasterOrderCatalog().addOrder(order);
            JOptionPane.showMessageDialog(null, "Order placed successfully!");
            order = new Order();
            refreshOrderTable();
            populateTable();
        }
        else{
            JOptionPane.showMessageDialog(null, "No order placed!");
            return;
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int row = jTableOrder.getSelectedRow();
        if(row < 0){
            JOptionPane.showMessageDialog(null, "Please select a row!","Warning",JOptionPane.WARNING_MESSAGE);
        }
        OrderItem orderItem = (OrderItem)jTableOrder.getValueAt(row, 0);
        int oldAvail = orderItem.getMarketOffer().getProduct().getAvail();
        int oldQuantity = orderItem.getQuantity();
        int newQuantity = oldAvail + oldQuantity;
        orderItem.getMarketOffer().getProduct().setAvail(newQuantity);
        order.removeOrderItem(orderItem);
        JOptionPane.showMessageDialog(null, "OrderItem removed from the cart!");
        refreshOrderTable();
        populateTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomActionPerformed
        int selectedRow = jTableMarketOffer.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a row!");
            return;
        }
        MarketOffer selectedMarketOffer = (MarketOffer)jTableMarketOffer.getValueAt(selectedRow, 0);
        //You can use this for target price to get the price between floor and ciel price
        Random r = new Random();
        int floorPrice = selectedMarketOffer.getFloorPrice();
        int ceilingPrice = selectedMarketOffer.getCeilingPrice();
        Double result = (double)floorPrice + ((double)ceilingPrice-(double)floorPrice)*r.nextDouble();
        txtActualPrice.setText(String.valueOf(result));
    }//GEN-LAST:event_btnRandomActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRandom;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JButton btnViewMarketOfferDetails;
    private javax.swing.JButton btnViewOrderItem;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox jComboBoxSupplier1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerQuantity;
    private javax.swing.JTable jTableMarketOffer;
    private javax.swing.JTable jTableOrder;
    private javax.swing.JTextField txtActualPrice;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSearchKeyWord;
    // End of variables declaration//GEN-END:variables
}
